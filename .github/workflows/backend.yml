# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: backend

on:
  push:
    branches: [master]
  pull_request:
    paths:
      - 'server/**/*'

env:
  DOTENV_LOCATION: .env.pytest
  PYTHON_VERSION: 3.9.9

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry

      - name: Cache dependencies
        uses: actions/cache@main
        id: cache-poetry
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install

  pytest:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 30s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cp .env.example .env
          cd server
          poetry run pytest -n auto --cache-clear
          poetry run pytest --dead-fixtures

  migrations-and-fixtures:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: uplifty
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 30s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cd server
          poetry run python manage.py migrate
          poetry run python manage.py makemigrations --check

  black:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cd server && poetry run black --check .

  schema:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - name: generate introspection schema
        run: |
          cd server && poetry run python manage.py graphql_schema --schema uplifty.schema.schema --out schema.json
      - name: check no changes to schema.json
        run: |
          if [[ `git status --porcelain server/schema.json` ]]; then
            git status --porcelain server/schema.json
            git diff --exit-code server/schema.json
            echo "Found changes to server/schema.json. Please check them in."
            exit 1
          fi
  isort:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cd server && poetry run isort --check-only uplifty/ tests/

  flake8-and-manage-py-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cd server && poetry run flake8 uplifty/ tests/ && poetry run ./manage.py check

  python-security-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: pip install poetry
      - name: Restore dependencies
        uses: actions/cache@main
        env:
          cache-name: cache-poetry
        with:
          path: server/.venv
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ env.cache-name }}-${{ hashFiles('server/poetry.lock') }}
      - run: |
          cd server
          poetry run safety check
          poetry run bandit -r uplifty/
